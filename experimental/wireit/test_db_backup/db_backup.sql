-- MySQL dump 10.11
--
-- Host: localhost    Database: wireit
-- ------------------------------------------------------
-- Server version	5.0.51a-3ubuntu5.4

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wirings`
--

DROP TABLE IF EXISTS `wirings`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `wirings` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) NOT NULL,
  `working` text NOT NULL,
  `language` varchar(255) NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `name` (`name`,`language`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `wirings`
--

LOCK TABLES `wirings` WRITE;
/*!40000 ALTER TABLE `wirings` DISABLE KEYS */;
INSERT INTO `wirings` VALUES (24,'fg','{\"modules\":[{\"config\":{\"position\":[979,393]},\"name\":\"workflow4\",\"value\":{\"Code\":\"#ACT# ( idatum:_ ) = let i = toInt idatum in [ toIntToken( i `mod` 100 )]\",\"label\":\"g_eval\"}},{\"config\":{\"position\":[1004,202]},\"name\":\"input\",\"value\":{\"input\":\"1\",\"label\":\"input1\",\"type\":\"toIntToken\"}},{\"config\":{\"position\":[458,277]},\"name\":\"workflow3\",\"value\":{\"Code\":\"#ACT# ( idatum:_ ) = let i = toInt idatum in [ toIntToken( i + 1 ), toIntToken( i * 2 ) ]\",\"label\":\"tuple_activity\"}},{\"config\":{\"position\":[811,37]},\"name\":\"comment\",\"value\":{\"comment\":\"The f/g loop example\"}},{\"config\":{\"position\":[278,48]},\"name\":\"result\",\"value\":{\"label\":\"result\",\"result\":\"do\\n        putStrLn \\\"fg\\\"\\n        (Just s0) <- startWorkflow (fgworkflow [])\\n        (sn, output) <- proceedWorkflow s0 []\\n        putStrLn $ \\\"output=\\\" ++ (show output)\"}},{\"config\":{\"position\":[95,576]},\"name\":\"outpipe\",\"value\":{\"OutPipe\":\"wfOutput\"}},{\"config\":{\"position\":[434,514]},\"name\":\"makeTimeout\",\"value\":{\"Code\":\"#ACT# st =\\n               let\\n                   (_:o:_:_) = getPipes st\\n                   result = getPipeData o\\n               in\\n                   toListToken result\",\"label\":\"output\",\"param\":\"5\"}},{\"config\":{\"position\":[157,317]},\"name\":\"pipe\",\"value\":{\"Pipe\":\"o\"}}],\"properties\":{\"description\":\"The f/g loop example with FAct.\",\"name\":\"fg\"},\"wires\":[{\"src\":{\"moduleId\":1,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":2,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":0,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":2,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":2,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":6,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":5,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":2,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":7,\"terminal\":\"input\"}}]}','workFlow'),(25,'newton','{\"modules\":[{\"config\":{\"position\":[628,206]},\"name\":\"workflow3\",\"value\":{\"Code\":\"   #ACT# (dbldatum:_) =\\n               let \\n                   f = toDouble dbldatum\\n                   reldiff :: Double -> Double -> Double\\n                   reldiff old new = abs (old - new) / old\\n                   \\n                   computeNext :: Double -> Double\\n                   computeNext x = x - f x / f\' x\\n                       where f  x = sin x\\n                             f\' x = cos x\\n                   f1 = computeNext f\\n                   result =    if (reldiff f f1) > 0.00000000000005 then\\n                                   [ toDoubleToken f1, toMissingToken ]\\n                               else\\n                                   [ toMissingToken, toDoubleToken f1 ]\\n               in\\n                   result\\n           #ACT# _ = [] \",\"label\":\"feval\"}},{\"config\":{\"position\":[1044,254]},\"name\":\"input\",\"value\":{\"input\":\"n\",\"label\":\"initial\",\"type\":\"blank\"}},{\"config\":{\"position\":[999,98]},\"name\":\"comment\",\"value\":{\"comment\":\"Newton\'s method\"}},{\"config\":{\"position\":[111,417]},\"name\":\"result\",\"value\":{\"label\":\"pull_result\",\"result\":\"    do\\n          putStrLn \\\"newton\\\"\\n          (Just s0) <- startWorkflow (newtonworkflow [(toIntToken 3)])\\n          (sn, [ output ]) <- proceedWorkflow s0 []\\n          putStrLn $ \\\"output=\\\" ++ (show output)\"}},{\"config\":{\"position\":[100,269]},\"name\":\"outpipe\",\"value\":{\"OutPipe\":\"OutPipe\"}},{\"config\":{\"position\":[281,231]},\"name\":\"take\",\"value\":{\"label\":\"take\",\"take\":\"1\"}},{\"config\":{\"position\":[804,486]},\"name\":\"parameters\",\"value\":{\"inargs\":\"[n]\"}}],\"properties\":{\"description\":\"\",\"name\":\"newton\"},\"wires\":[{\"src\":{\"moduleId\":1,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":0,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":5,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":5,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":0,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input\"}}]}','workFlow'),(36,'TagSlurp','{\"modules\":[{\"config\":{\"position\":[1407,254]},\"name\":\"input\",\"value\":{\"input\":\"\\\"./data/urls\\\"\",\"label\":\"pump\",\"type\":\"toStringToken\"}},{\"config\":{\"position\":[1129,464]},\"name\":\"serializer\",\"value\":{\"label\":\"ser1\"}},{\"config\":{\"position\":[1036,561]},\"name\":\"makeFileRead\",\"value\":{\"label\":\"filerd1\"}},{\"config\":{\"position\":[951,657]},\"name\":\"makeURLFetch2\",\"value\":{\"label\":\"urlfetch1\"}},{\"config\":{\"position\":[919,813]},\"name\":\"replicate2\",\"value\":{\"label\":\"repl1\"}},{\"config\":{\"position\":[689,679]},\"name\":\"makeGetTags\",\"value\":{\"label\":\"gettags1\"}},{\"config\":{\"position\":[601,536]},\"name\":\"replicate2\",\"value\":{\"label\":\"repl2\"}},{\"config\":{\"position\":[32,282]},\"name\":\"pipe\",\"value\":{\"Pipe\":\"GROUND\"}},{\"config\":{\"position\":[168,247]},\"name\":\"workflow4\",\"value\":{\"Code\":\"#ACT# threadId ( [ nametagspair ] ) =\\n                       let\\n                           ( named, tagsd ) = toPair nametagspair\\n                           filename = toString named\\n                           tags = toList tagsd\\n                           writetags handle [] = return ()\\n                           writetags handle (t:ts) = do\\n                               liftIO $ hPutStr handle $ toString t\\n                               liftIO $ hPutStr handle \\\"\\\\n\\\"\\n                               writetags handle ts\\n                           newname = filename ++ \\\".tags\\\"\\n                       in do\\n                           liftIO $                putStrLn $ \\\"fwritetags: [\\\" ++ newname ++ \\\"] \\\" ++ (show (length tags)) ++ \\\" tags\\\"\\n                           handle <- liftIO $      openFile newname WriteMode\\n                           writetags handle tags\\n                           liftIO $ hClose handle\\n                           return $ [toMissingToken]\",\"label\":\"fwritetags#M#\"}},{\"config\":{\"position\":[60,671]},\"name\":\"workflow4\",\"value\":{\"Code\":\"#ACT# ( [ nametagspair ] ) =\\n                       let\\n                           ( named, tagsd ) = toPair nametagspair\\n                           filename = toString named\\n                           tags = toList tagsd\\n                           fixtags [] result = result\\n                           fixtags (td:ts) result =\\n                               let\\n                                   t = toString td\\n                                   x = if ( \\\"http://\\\" `isPrefixOf` t ) then\\n                                           [ toPairToken( named, toStringToken t ) ]\\n                                       else\\n                                           []\\n                               in\\n                                   fixtags ts (result ++ x)\\n                           fixedtags = fixtags tags []\\n                       in\\n                           [toListToken fixedtags]\",\"label\":\"ffixtags\"}},{\"config\":{\"position\":[288,491]},\"name\":\"serializer\",\"value\":{\"label\":\"ser2\"}},{\"config\":{\"position\":[34,32]},\"name\":\"workflow4\",\"value\":{\"Code\":\"#ACT# threadId ( [ nameimgpair ] ) =\\n                   let\\n                       ( named, imgd ) = toPair nameimgpair\\n                       filename = toString named\\n                       img = toString imgd\\n                   in do\\n                       rnd <- liftIO $ ( getStdRandom ( randomR (1, 10000) ) :: IO Int )\\n                       let newname = filename ++ \\\".imgs/\\\" ++ (show rnd)\\n                       liftIO $                putStrLn $ \\\"fwriteimg[\\\" ++ newname ++ \\\"] \\\" ++ (show (length img)) ++ \\\" bytes\\\"\\n                       handle <- liftIO $      openFile newname WriteMode\\n                       liftIO $    hPutStr handle $ img\\n                       liftIO $ hClose handle\\n                       return $ [toMissingToken]\",\"label\":\"fwriteimg#M#\"}},{\"config\":{\"position\":[1124,31]},\"name\":\"comment\",\"value\":{\"comment\":\"TagSlurp\"}},{\"config\":{\"position\":[827,259]},\"name\":\"result\",\"value\":{\"label\":\"pull_result\",\"result\":\"do\\n           (Just s0) <- startWorkflow (tagslurpworkflow [])\\n\\n           st <- runWorkflowNCycles s0 150\\n\\n\\t   let oPipeData = getWorkflowPipeData st \\\"imgurlR\\\"\\n           putStrLn \\\"Data for pipe imgurlR:\\\"\\n           WOOLUtil.printData oPipeData             \\n\\n           putStrLn \\\"All done\\\"\"}},{\"config\":{\"position\":[775,90]},\"name\":\"replicate2\",\"value\":{\"label\":\"repl3\"}},{\"config\":{\"position\":[511,170]},\"name\":\"pipe\",\"value\":{\"Pipe\":\"imgurlR\"}},{\"config\":{\"position\":[471,74]},\"name\":\"makeURLFetch2\",\"value\":{\"label\":\"urlfetch2\"}},{\"config\":{\"position\":[1177,306]},\"name\":\"makeDirList\",\"value\":{\"label\":\"dirlist\",\"suffix\":\".url\"}},{\"config\":{\"position\":[604,769]},\"name\":\"makeFileWrite\",\"value\":{\"label\":\"filewrite\",\"prefix\":\"\",\"suffix\":\".page\"}}],\"properties\":{\"description\":\"\",\"name\":\"tagslurp\"},\"wires\":[{\"src\":{\"moduleId\":8,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":7,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":11,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":7,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":1,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":2,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":2,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":3,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":3,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":5,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":6,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":6,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":8,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":6,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":9,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":9,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":10,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":10,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":14,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":14,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":16,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":14,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":15,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":16,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":11,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":0,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":17,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":17,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":1,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":18,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":7,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":4,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":5,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":4,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":18,\"terminal\":\"input\"}}]}','workFlow'),(37,'evenodd','{\"modules\":[{\"config\":{\"position\":[550,158]},\"name\":\"workflow3\",\"value\":{\"Code\":\"#ACT# [] [i] = seval [toIntToken 0] [i]\\n        #ACT# [p] [i] =\\n                   let parity = toInt p in\\n                   if ( parity == 0 ) then\\n                       ( [toIntToken 1], [ i, toMissingToken ] )\\n                   else\\n                       ( [toIntToken 0], [ toMissingToken, i ] )\",\"label\":\"seval#S#\"}},{\"config\":{\"position\":[1045,171]},\"name\":\"counter\",\"value\":{\"end\":\"999999999\",\"label\":\"counter\",\"start\":\"1\"}},{\"config\":{\"position\":[218,149]},\"name\":\"take\",\"value\":{\"label\":\"take\",\"take\":\"5\"}},{\"config\":{\"position\":[50,228]},\"name\":\"outpipe\",\"value\":{\"OutPipe\":\"output\"}},{\"config\":{\"position\":[1085,445]},\"name\":\"comment\",\"value\":{\"comment\":\"evenodd example\"}},{\"config\":{\"position\":[251,454]},\"name\":\"result\",\"value\":{\"label\":\"result\",\"result\":\"do\\n           putStrLn \\\"EvenOdd\\\"\\n           (Just s0) <- startWorkflow (evenoddworkflow [])\\n           (sn, output) <- proceedWorkflow s0 []\\n           putStrLn $ \\\"output=\\\" ++ (show output)\"}}],\"properties\":{\"description\":\"\",\"name\":\"evenodd\"},\"wires\":[{\"src\":{\"moduleId\":1,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":0,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":2,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":2,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":3,\"terminal\":\"input\"}}]}','workFlow'),(38,'imgdiff','{\"modules\":[{\"config\":{\"position\":[407,271]},\"name\":\"workflow1\",\"value\":{\"Code\":\"#ACT# :: (Monad m,MonadIO m) => OperatorID -> [Token] -> WorkflowT m [Token]\\n        #ACT# threadId ( [ l, r ] ) =\\n           if isSignal l then do\\n               return $ [toMissingToken]\\n           else\\n               let\\n                   ( lfilenamed, limgd ) = toPair l\\n                   lfilename = toString lfilenamed\\n                   limg = toString limgd\\n               \\n                   ( rfilenamed, rimgd ) = toPair r\\n                   rfilename = toString rfilenamed\\n                   rimg = toString rimgd\\n               in do\\n                   (lBMH,lBMW,lBMHeader,lBMData) <- parseBitmap limg Nothing\\n                   (rBMH,rBMW,rBMHeader,rBMData) <- parseBitmap rimg Nothing\\n                   let deltaBMData = zipWith simpleDiff1 lBMData rBMData\\n                   let deltaBM = (lBMH,lBMW,lBMHeader,deltaBMData)\\n                   let deltaName = buildDeltaName lfilename rfilename\\n                   delta <- formatBitmap deltaBM\\n                   liftIO $                putStrLn $ \\\"computeDelta[\\\" ++ deltaName ++ \\\"] \\\"\\n                   return $ [ toPairToken ( toStringToken deltaName, toStringToken delta ) ]\",\"label\":\"computeDelta#M#\"}},{\"config\":{\"position\":[609,18]},\"name\":\"comment\",\"value\":{\"comment\":\"imgdiff\"}},{\"config\":{\"position\":[1499,389]},\"name\":\"makeDirList\",\"value\":{\"label\":\"dirlist\",\"suffix\":\".bmp\"}},{\"config\":{\"position\":[1626,190]},\"name\":\"input\",\"value\":{\"input\":\"\\\"./data/images\\\"\",\"label\":\"pump1\",\"type\":\"toStringToken\"}},{\"config\":{\"position\":[1341,543]},\"name\":\"replicate2\",\"value\":{\"label\":\"repl1\"}},{\"config\":{\"position\":[985,284]},\"name\":\"workflow1\",\"value\":{\"Code\":\"#ACT# :: (Monad m,MonadIO m) => OperatorID -> [Token] -> WorkflowT m [Token]\\n        #ACT# threadId ( [s, d] ) =\\n           let\\n               sources = toList s\\n               deltas = toList d\\n               pageHeader = \\\"<html><body>\\\"\\n               pageFooter = \\\"</body></html>\\\"\\n               insertImage (nm) = \\\"<td><img width=256 src=\'\\\" ++ (toString nm) ++ \\\"\'/></td>\\\\n\\\"\\n               addImages [] buf = buf\\n               addImages (i:is) buf = addImages is $ buf ++ (insertImage i)\\n               pagetop = pageHeader ++ \\\"<h3>Sources</h3><table><tr>\\\" ++ (addImages sources []) ++ (\\\"</tr></table>\\\")\\n               pagebottom = \\\"<h3>Deltas</h3><table><tr><td width=128>&nbsp</td>\\\" ++ (addImages deltas []) ++ (\\\"</tr></table>\\\") ++ pageFooter\\n           in do\\n               return $ [ toPairToken ( toStringToken \\\"imgdiff.html\\\", toStringToken ( pagetop ++ pagebottom ) ) ]\",\"label\":\"generateIndex#M#\"}},{\"config\":{\"position\":[1070,657]},\"name\":\"serializer\",\"value\":{\"label\":\"ser1\"}},{\"config\":{\"position\":[1092,524]},\"name\":\"makeFileRead\",\"value\":{\"label\":\"filered1\"}},{\"config\":{\"position\":[844,493]},\"name\":\"replicate2\",\"value\":{\"label\":\"repl2\"}},{\"config\":{\"position\":[774,154]},\"name\":\"input\",\"value\":{\"input\":\"\",\"label\":\"pump2\",\"type\":\"toSignalToken\"}},{\"config\":{\"position\":[271,107]},\"name\":\"makeFileWrite\",\"value\":{\"label\":\"filewrit1\",\"prefix\":\"./data/imagedeltas/\",\"suffix\":\"\"}},{\"config\":{\"position\":[77,228]},\"name\":\"take\",\"value\":{\"label\":\"take\",\"take\":\"4\"}},{\"config\":{\"position\":[463,584]},\"name\":\"makeFileWrite\",\"value\":{\"label\":\"filewrit2\",\"prefix\":\"./\",\"suffix\":\"\"}},{\"config\":{\"position\":[152,603]},\"name\":\"outpipe\",\"value\":{\"OutPipe\":\"output\"}},{\"config\":{\"position\":[1157,35]},\"name\":\"result\",\"value\":{\"label\":\"result\",\"result\":\"do   \\n       (Just s0) <- startWorkflow (imgdiffworkflow [])\\n       (sn, result) <- proceedWorkflow s0 []\\n       putStrLn $ \\\"result=\\\" ++ (show result)     \\n\\n       putStrLn \\\"All done\\\"\"}},{\"config\":{\"position\":[159,714]},\"name\":\"helperfuns\",\"value\":{\"helper\":\"buildDeltaName lpath rpath =\\n\\t    let\\n\\t\\tlnameext = takeFileName( lpath )\\n\\t\\tlname = dropExtension( lnameext )\\n\\t\\trnameext = takeFileName( rpath )\\n\\t\\trname = dropExtension( rnameext )\\n\\t\\tdelta = lname ++ \\\"_\\\" ++ rname ++ \\\".bmp\\\"\\n\\t    in\\n\\t\\tdelta\"}},{\"config\":{\"position\":[467,722]},\"name\":\"helperfuns\",\"value\":{\"helper\":\"simpleDiff1 ( Color4 lr lg lb la ) ( Color4 rr rg rb ra ) =\\n\\t    let\\n\\t\\tnewr = if ( ( lr == rr ) ) then lr else 0\\n\\t\\tnewg = if ( ( lg == rg ) ) then lg else 0\\n\\t\\tnewb = if ( ( lb == rb ) ) then lb else 0\\n\\t\\tnewa = if ( ( la == ra ) ) then la else 0\\n\\t    in\\n\\t\\t(Color4 newr newg newb newa)\"}},{\"config\":{\"position\":[63,380]},\"name\":\"helperfuns\",\"value\":{\"helper\":\"simpleDiff2 ( Color4 lr lg lb la ) ( Color4 rr rg rb ra ) =\\t\\n\\t    let\\n\\t\\tnewr = ( lr + rr )\\n\\t\\tnewg = ( lg + rg )\\n\\t\\tnewb = ( lb + rb )\\n\\t\\tnewa = ( la + ra )\\n\\t    in\\n\\t\\t(Color4 newr newg newb newa)\"}}],\"properties\":{\"description\":\"\",\"name\":\"imgdiff\"},\"wires\":[{\"src\":{\"moduleId\":3,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":2,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":2,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":4,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":5,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":4,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":6,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":6,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":7,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":7,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":8,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":8,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":8,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":9,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":0,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":10,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":10,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":11,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":11,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":5,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":5,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":12,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":12,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":13,\"terminal\":\"input\"}}]}','workFlow'),(39,'sub','{\"modules\":[{\"config\":{\"position\":[494,192]},\"name\":\"workflow3\",\"value\":{\"Code\":\"#ACT# ( [fdatum] ) =\\n                let f = toInt fdatum in\\n\\t\\t       if ( f > 0 ) then\\n\\t\\t\\t   [ toIntToken( f * f ), toMissingToken ]\\n\\t\\t       else if ( f < 0 ) then\\n\\t\\t\\t   [ toMissingToken, toIntToken ( f * f ) ]\\n\\t\\t       else\\n\\t\\t\\t   [ toIntToken ( f * f ), toIntToken ( f + f ) ]\",\"label\":\"feval\"}},{\"config\":{\"position\":[1036,173]},\"name\":\"input\",\"value\":{\"input\":\"11\",\"label\":\"input\",\"type\":\"toIntToken\"}},{\"config\":{\"position\":[145,121]},\"name\":\"outpipe\",\"value\":{\"OutPipe\":\"outputL\"}},{\"config\":{\"position\":[141,382]},\"name\":\"outpipe\",\"value\":{\"OutPipe\":\"outputR\"}},{\"config\":{\"position\":[535,509]},\"name\":\"result\",\"value\":{\"label\":\"main\",\"result\":\"do\\n    putStrLn \\\"Running mainflow:\\\"\\n    (Just s0) <- startWorkflow (subworkflow [])\\n    ( sn, [ output1,output2 ] ) <- proceedWorkflow s0 []\\n    putStrLn $ \\\"output=\\\" ++ (show output1)\"}}],\"properties\":{\"description\":\"workflow used in subflow example\",\"name\":\"sub\"},\"wires\":[{\"src\":{\"moduleId\":1,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":0,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":2,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":0,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":3,\"terminal\":\"input\"}}]}','workFlow'),(45,'subfleg','{\"modules\":[{\"config\":{\"position\":[27,368]},\"name\":\"outpipe\",\"value\":{\"OutPipe\":\"output\"}},{\"config\":{\"position\":[153,302]},\"name\":\"take\",\"value\":{\"label\":\"take3\",\"take\":\"3\"}},{\"config\":{\"position\":[156,437]},\"name\":\"take\",\"value\":{\"label\":\"take5\",\"take\":\"5\"}},{\"config\":{\"position\":[126,721]},\"name\":\"comment\",\"value\":{\"comment\":\"Example using subflow sub\"}},{\"config\":{\"position\":[735,347]},\"name\":\"replicate2\",\"value\":{\"label\":\"repl1\"}},{\"config\":{\"position\":[1033,206]},\"name\":\"input\",\"value\":{\"input\":\"11\",\"label\":\"push\",\"type\":\"toIntToken\"}},{\"config\":{\"position\":[1043,345]},\"name\":\"input\",\"value\":{\"input\":\"2\",\"label\":\"push\",\"type\":\"toIntToken\"}},{\"config\":{\"position\":[1024,505]},\"name\":\"input\",\"value\":{\"input\":\"5\",\"label\":\"push\",\"type\":\"toIntToken\"}},{\"config\":{\"position\":[495,598]},\"name\":\"result\",\"value\":{\"label\":\"main\",\"result\":\"do\\n    putStrLn \\\"Running mainflow:\\\"\\n    (Just s0) <- startWorkflow (subflegworkflow [])\\n    ( sn, [ output ] ) <- proceedWorkflow s0 []\\n    putStrLn $ \\\"output=\\\" ++ (show output)\"}},{\"config\":{\"position\":[466,366]},\"name\":\"sub\",\"value\":{\"label\":\"subworkflow\"}}],\"properties\":{\"description\":\"Example using subflow sub\",\"name\":\"subfleg\"},\"wires\":[{\"src\":{\"moduleId\":5,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":6,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":7,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":1,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":2,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":0,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":9,\"terminal\":\"output0\"},\"tgt\":{\"moduleId\":1,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":9,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":2,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":4,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":9,\"terminal\":\"input0\"}},{\"src\":{\"moduleId\":4,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input\"}}]}','workFlow'),(46,'fib','{\"modules\":[{\"config\":{\"position\":[22,98]},\"name\":\"input\",\"value\":{\"input\":\"[0]\",\"label\":\"in1\",\"type\":\"\"}},{\"config\":{\"position\":[318,129]},\"name\":\"seededStream\",\"value\":{\"label\":\"seed1\"}},{\"config\":{\"position\":[317,340]},\"name\":\"seededStream\",\"value\":{\"label\":\"seed2\"}},{\"config\":{\"position\":[610,390]},\"name\":\"dup\",\"value\":{\"label\":\"dup1\"}},{\"config\":{\"position\":[527,122]},\"name\":\"lifter2\",\"value\":{\"Code\":\"(+)\",\"label\":\"adder\"}},{\"config\":{\"position\":[823,268]},\"name\":\"dup\",\"value\":{\"label\":\"dup2\"}},{\"config\":{\"position\":[1074,266]},\"name\":\"output\",\"value\":{\"label\":\"out1\",\"output\":\"\"}},{\"config\":{\"position\":[26,235]},\"name\":\"input\",\"value\":{\"input\":\"[1]\",\"label\":\"in2\",\"type\":\"\"}},{\"config\":{\"position\":[882,515]},\"name\":\"main\",\"value\":{\"label\":\"main\",\"main\":\"main :: IO ()\\nmain = do\\n  print $ sTake 10 (toEStream fib)\"}},{\"config\":{\"position\":[132,516]},\"name\":\"comment\",\"value\":{\"comment\":\"Fibonacci numbers\"}},{\"config\":{\"position\":[499,582]},\"name\":\"main\",\"value\":{\"label\":\"main2\",\"main\":\"\\n\\nmain2 :: IO ()\\nmain2 = do\\n  let f = (toEStream fib)\\n  print $ sTake 10 f\\n  print $ sTake 10 f\"}}],\"properties\":{\"description\":\"Define a workflow that produces Fibonacci numbers\",\"name\":\"fib\"},\"wires\":[{\"src\":{\"moduleId\":1,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":2,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":3,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":3,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":1,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":3,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":4,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":5,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":5,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":6,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":5,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":2,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":0,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":1,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":7,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":2,\"terminal\":\"input1\"}}]}','stream'),(47,'primes','{\"modules\":[{\"config\":{\"position\":[976,504]},\"name\":\"comment\",\"value\":{\"comment\":\"Calculate primes\"}},{\"config\":{\"position\":[916,664]},\"name\":\"main\",\"value\":{\"label\":\"main\",\"main\":\"main :: IO ()\\nmain = do\\n  print $ sTake 100 (toPStream primes)\"}},{\"config\":{\"position\":[568,644]},\"name\":\"helperfuns\",\"value\":{\"helper\":\"--\\n-- Domain functions\\n--\\ndivides :: Int -> Int -> Bool\\ndivides x y = x `mod` y == 0\\n\\ndividesByN :: [Int] -> Int -> Bool\\ndividesByN ys x = or (map (divides x) ys)\\n\\naccept :: a -> Bool -> Maybe a\\naccept k True  = Just k\\naccept _ False = Nothing\\n\\n--\\n-- Other Stream primitives\\n--\\nmemorize :: [a] -> Maybe a -> [a]\\nmemorize mems (Just x)  = x:mems\\nmemorize mems (Nothing) = mems\\n\\nsDebubble :: (Streamer a (Maybe b), Streamer c b) => a -> c\\nsDebubble s = newStream (db s)\\n  where db st = let sf = sFront st\\n                in if (isNothing sf) then (db $ sRest st)\\n\\t        else (fromJust sf) : (db $ sRest st)\"}},{\"config\":{\"position\":[276,287]},\"name\":\"lifter2\",\"value\":{\"Code\":\"dividesByN\",\"label\":\"sDivides\"}},{\"config\":{\"position\":[330,61]},\"name\":\"lifter2\",\"value\":{\"Code\":\"accept\",\"label\":\"sAccept\"}},{\"config\":{\"position\":[579,191]},\"name\":\"lifter\",\"value\":{\"Code\":\"not\",\"label\":\"sNot\"}},{\"config\":{\"position\":[593,452]},\"name\":\"lifter2\",\"value\":{\"Code\":\"memorize\",\"label\":\"sMemory\"}},{\"config\":{\"position\":[146,191]},\"name\":\"dup\",\"value\":{\"label\":\"dup1\"}},{\"config\":{\"position\":[139,647]},\"name\":\"dup\",\"value\":{\"label\":\"dup2\"}},{\"config\":{\"position\":[933,141]},\"name\":\"seededStream\",\"value\":{\"label\":\"seed1\"}},{\"config\":{\"position\":[633,341]},\"name\":\"dup\",\"value\":{\"label\":\"dup3\"}},{\"config\":{\"position\":[978,346]},\"name\":\"output\",\"value\":{\"label\":\"out\",\"output\":\"sDebubble\"}},{\"config\":{\"position\":[11,446]},\"name\":\"input\",\"value\":{\"input\":\"toPStream (newStream [[]])\",\"label\":\"in2\",\"type\":\"\"}},{\"config\":{\"position\":[662,25]},\"name\":\"input\",\"value\":{\"input\":\"[Nothing]\",\"label\":\"in3\",\"type\":\"\"}},{\"config\":{\"position\":[311,417]},\"name\":\"selectLtR\",\"value\":{\"label\":\"slr1\"}},{\"config\":{\"position\":[21,78]},\"name\":\"counterStream\",\"value\":{\"count\":\"2\",\"label\":\"\"}}],\"properties\":{\"description\":\"An example of programming with streams.\",\"name\":\"primes\"},\"wires\":[{\"src\":{\"moduleId\":12,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":14,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":7,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":3,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":7,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":6,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":8,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":8,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":14,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":8,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":3,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":3,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":5,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":5,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":4,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":14,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":6,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":4,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":9,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":13,\"terminal\":\"out\"},\"tgt\":{\"moduleId\":9,\"terminal\":\"input1\"}},{\"src\":{\"moduleId\":9,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":10,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":10,\"terminal\":\"output2\"},\"tgt\":{\"moduleId\":11,\"terminal\":\"input\"}},{\"src\":{\"moduleId\":10,\"terminal\":\"output1\"},\"tgt\":{\"moduleId\":6,\"terminal\":\"input2\"}},{\"src\":{\"moduleId\":15,\"terminal\":\"output\"},\"tgt\":{\"moduleId\":7,\"terminal\":\"input\"}}]}','stream');
/*!40000 ALTER TABLE `wirings` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2009-09-09 21:19:43
